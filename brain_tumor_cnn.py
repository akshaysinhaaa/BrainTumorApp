# -*- coding: utf-8 -*-
"""Brain Tumor CNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ByuYOu3A4RNf8x7ZAnUFjWpuAxdJgfKt
"""

import numpy as np
import os
import matplotlib.pyplot as plt
import math
import shutil

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive/MyDrive/Colab_Notebooks/Dataset
# %cp -av all_tumors /content/

# !rm -rf "./Val"
# !rm -rf "./Train"
# !rm -rf "./Test"
# !rm -rf "./Tumors"

# Commented out IPython magic to ensure Python compatibility.
# %cd /content
Root = "Tumors"
numimgs = {}
for i in os.listdir(Root):
  numimgs[i] = len(os.listdir(os.path.join(Root,i)))

print(numimgs.items())
sum(numimgs.values())

def segregrate(path,ratio):
  if not os.path.exists("./"+path):
    os.mkdir("./"+path)

  for i in os.listdir(Root):
    os.makedirs("./"+path+"/"+i)


    for img in np.random.choice(a = os.listdir(os.path.join(Root, i)) ,
                                 size = (math.floor(ratio*numimgs[i])-2),
                                 replace = False):
      O = os.path.join(Root,i,img)
      D = os.path.join("./"+path,i)
      shutil.copy(O,D)
      os.remove(O)
  else:
    print(f"{path} Folder Exists")

# segregrate("Train",0.7)
#
# segregrate("Test",0.15)
#
# segregrate("Val",0.15)

def checknumber(path):
  numimgs = {}
  for i in os.listdir(path):
    numimgs[i] = len(os.listdir(os.path.join(path,i)))
  return numimgs

# checknumber("/content/Train")
# checknumber("/content/Test")
# checknumber("/content/Val")

from keras.layers import Conv2D, MaxPool2D, Dropout, Flatten, Dense,  BatchNormalization,GlobalAvgPool2D
from keras.models import Sequential
from keras.preprocessing.image import ImageDataGenerator
from keras.applications.mobilenet import preprocess_input
import keras

model = Sequential()

model.add(Conv2D(filters = 16, kernel_size = (3,3), activation = 'relu', input_shape=(224,224,3), padding = 'same'))
model.add(Conv2D(filters = 36, kernel_size = (3,3), activation = 'relu'))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Conv2D(filters = 64, kernel_size = (3,3), activation = 'relu'))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Conv2D(filters = 128, kernel_size = (3,3), activation = 'relu'))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Conv2D(filters = 256, kernel_size = (3,3), activation = 'relu'))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Dropout(rate = 0.3))

model.add(Flatten())

model.add(Dense(units = 64, activation = 'relu'))
model.add(Dropout(rate = 0.3))

model.add(Dense(units = 32, activation = 'relu'))
# model.add(Dropout(rate = 0.3))

model.add(Dense(units = 6, activation = 'softmax'))

model.summary()
model.compile(optimizer = 'adam', loss = keras.losses.categorical_crossentropy, metrics = "accuracy")

TrainData = ImageDataGenerator(zoom_range = 0.1, shear_range = 0.1, preprocessing_function= preprocess_input, horizontal_flip = True).flow_from_directory(directory = "./Train", target_size = (224,224), batch_size = 32, classes = ['meningioma',"glioma","Astrocytoma","pituitary","notumor","metastatic"])

TestData = ImageDataGenerator(preprocessing_function= preprocess_input).flow_from_directory(directory = "./Test", target_size = (224,224), batch_size = 32,classes = ['meningioma',"glioma","Astrocytoma","pituitary","notumor","metastatic"])

ValData = ImageDataGenerator(preprocessing_function= preprocess_input).flow_from_directory(directory = "./Val", target_size = (224,224), batch_size = 32, classes = ['meningioma',"glioma","Astrocytoma","pituitary","notumor","metastatic"])

from keras.callbacks import ModelCheckpoint, EarlyStopping

eas = EarlyStopping(monitor = "val_accuracy",min_delta = 0.01, patience = 6 , verbose = 1, mode='auto')

modc = ModelCheckpoint(monitor = "val_accuracy",filepath= "./model.h5",verbose = 1, save_best_only = True, mode='auto')

arr = [eas,modc]
trdat = model.fit(x= TrainData, steps_per_epoch = 30, epochs = 40, verbose = 1, validation_data = ValData ,callbacks=arr)

# h = trdat.history
# plt.plot(h['accuracy'])
# plt.plot(h['val_accuracy'], c="red")
# plt.title("acc VS val-acc")
# plt.show()
#
# plt.plot(h['loss'])
# plt.plot(h['val_loss'], c="red")
# plt.title("loss VS val-loss")
# plt.show()
#
from keras.models import load_model
#
model = load_model("model.h5")

acc = model.evaluate(TestData)[1]
print(f"Accuracy of model is {acc*100}%")
from tensorflow.keras.utils import load_img, img_to_array
from keras.applications.mobilenet import MobileNet
from keras.models import Model

base_model = MobileNet(input_shape = (224,224,3), include_top = False)

for layer in base_model.layers:
  layer.trainable = False

x = Flatten()(base_model.output)
x = Dense(units = 32, activation = "relu")(x)
x = Dense(units = 6, activation = 'softmax')(x)

model = Model(base_model.input,x)

model.summary()
from keras.callbacks import ModelCheckpoint, EarlyStopping

eas = EarlyStopping(monitor = "val_accuracy",min_delta = 0.01, patience = 10 , verbose = 1, mode='auto')

modc = ModelCheckpoint(monitor = "val_accuracy",filepath= "./model.h5",verbose = 1, save_best_only = True, mode='auto')

arr = [eas,modc]

model.compile(optimizer = 'adam', loss = keras.losses.categorical_crossentropy, metrics = "accuracy")

trdat = model.fit(x= TrainData, steps_per_epoch = 30, epochs = 40, verbose = 1, validation_data = ValData ,callbacks=arr)
#
# h = trdat.history
# plt.plot(h['accuracy'])
# plt.plot(h['val_accuracy'], c="red")
# plt.title("acc VS val-acc")
# plt.show()
#
# plt.plot(h['loss'])
# plt.plot(h['val_loss'], c="red")
# plt.title("loss VS val-loss")
# plt.show()

from keras.models import load_model

model = load_model("model.h5")

acc = model.evaluate(TestData)[1]
print(f"Accuracy of model is {acc*100}%")

# path = "Tumors/notumor/Te-no_0047.jpg"
# path = "/content/Tumors/meningioma/Te-me_0302.jpg"
# path = "/content/Tumors/glioma/Te-gl_0030.jpg"
# path = "/content/Tumors/metastatic/y1292.jpg"                                 #hmm
# path = "/content/Tumors/notumor/Te-no_0362.jpg"
# path = "/content/Tumors/pituitary/Te-pi_0010.jpg" #hmm


def predi(path):
  model = load_model("model.h5")
  img = load_img(path,target_size = (224,224))
  inputarr = img_to_array(img)
  inputarr = preprocess_input(inputarr)/255
  inputarr.shape
  inputarr = np.expand_dims(inputarr,axis = 0)
  inputarr.shape

  pred = model.predict(x = inputarr)[0]
  pred = np.argmax(pred)
  if pred == 0:
    return "Menignioma"
  elif pred == 1:
    return "Glioma"
  elif pred == 2:
    return "Astrocytoma"
  elif pred == 3:
    return "Pituitary"
  elif pred == 4:
    return "No"
  elif pred == 5:
    return "Metastatic"
  else:
    pass
